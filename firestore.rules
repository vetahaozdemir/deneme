rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Root level user documents - allow authenticated users to access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User subcollections for unified React app
      match /{subcollection=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Legacy data structures - preserve existing data
    match /library_books/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    
    match /expenses/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    
    match /fitness_data/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    
    match /tasks/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    
    match /projects/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    
    match /goals/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    
    match /camps/{document} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
    }
    
    // React app specific collections
    match /userData/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      match /{subcollection=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    match /appConfig/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /cocukBilgiData/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Reading history and statistics - shared between old and new apps
    match /reading_stats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /user_settings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Legacy collections - read-only to preserve historical data
    match /old_expenses/{document} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if false; // Preserve historical data
    }
    
    match /old_library/{document} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if false; // Preserve historical data
    }
    
    match /old_fitness/{document} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if false; // Preserve historical data
    }
    
    // Public read-only data
    match /public_data/{document} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Admin only collections
    match /admin/{document} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // Validation functions
    function isValidUser() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidData(data) {
      return data != null && 
             data.keys().hasAll(['createdAt', 'updatedAt']) &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    // Example of protected write with validation
    match /validated_data/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
                    isValidData(request.resource.data) &&
                    request.resource.data.createdAt == request.time;
      allow update: if isOwner(userId) && 
                    isValidData(request.resource.data) &&
                    request.resource.data.updatedAt == request.time &&
                    request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isOwner(userId);
    }
  }
}